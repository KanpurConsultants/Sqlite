Imports System.Windows.Forms
Public Class AgDataGrid

    Inherits DataGridView



    Dim WithEvents Dg As AgDataGrid
    Dim mAgLib As New AgLib
    Dim mAgValue()() As String
    Dim mCancelEditingControlValidating As Boolean
    Public Event EditingControl_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
    Public Event EditingControl_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
    Public Event EditingControl_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
    Public Event EditingControl_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
    Public Event EditingControl_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs)

    Dim x As New BindingSource
    Dim mSearchMethod As AgLib.TxtSearchMethod
    Dim mReadOnlyColumnColor As System.Drawing.Color = Color.Ivory


    Sub New()
    End Sub

    Public Enum TxtValueType
        Text_Value = 0
        Number_Value = 1
        Date_Value = 2
        YesNo_Value = 3
    End Enum

    Public Enum TxtCase
        None = 0
        Upper_Case = 1
        Lower_Case = 2
        Sentance_Case = 3

    End Enum

    Public Property CancelEditingControlValidating() As Boolean
        Get
            CancelEditingControlValidating = mCancelEditingControlValidating
        End Get
        Set(ByVal value As Boolean)
            mCancelEditingControlValidating = value
        End Set
    End Property


    Public Property AgAllowDuplicate(ByVal mColumn As Integer) As Boolean
        Get
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                Return CType(Me.Columns(mColumn), AgTextColumn).AgAllowDuplicate
            ElseIf TypeOf Me.Columns(mColumn) Is AgComboColumn Then
                Return CType(Me.Columns(mColumn), AgComboColumn).AgAllowDuplicate
            Else
                Return Nothing
            End If
        End Get
        Set(ByVal value As Boolean)
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                CType(Me.Columns(mColumn), AgTextColumn).AgAllowDuplicate = value
            ElseIf TypeOf Me.Columns(mColumn) Is AgComboColumn Then
                CType(Me.Columns(mColumn), AgComboColumn).AgAllowDuplicate = value
            End If
        End Set
    End Property


    Public Property AgSearchMethod() As AgLib.TxtSearchMethod
        Get
            AgSearchMethod = mSearchMethod
        End Get
        Set(ByVal value As AgLib.TxtSearchMethod)
            mSearchMethod = value
        End Set
    End Property

    Public Property AgReadOnlyColumnColor() As System.Drawing.Color
        Get
            AgReadOnlyColumnColor = mReadOnlyColumnColor
        End Get
        Set(ByVal value As System.Drawing.Color)
            mReadOnlyColumnColor = value
        End Set
    End Property

    Public Property AgDefaultValue(ByVal mColumn As Integer) As String
        Get
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                Return CType(Me.Columns(mColumn), AgTextColumn).AgDefaultValue
            Else
                Return Nothing
            End If
        End Get
        Set(ByVal value As String)
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                CType(Me.Columns(mColumn), AgTextColumn).AgDefaultValue = value
            End If
        End Set
    End Property

    Public Property AgMandatoryColumn() As Integer
        Get
            AgMandatoryColumn = mMandatoryColumn
        End Get
        Set(ByVal value As Integer)
            mMandatoryColumn = value
        End Set
    End Property

    Public Property AgDefaultValue(ByVal mColumn As String) As String
        Get
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                Return CType(Me.Columns(mColumn), AgTextColumn).AgDefaultValue
            Else
                Return Nothing
            End If
        End Get
        Set(ByVal value As String)
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                CType(Me.Columns(mColumn), AgTextColumn).AgDefaultValue = value
            End If
        End Set
    End Property


    Public Property AgRowFilter(ByVal mColumn As Integer) As String
        Get
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                Return CType(Me.Columns(mColumn), AgTextColumn).AgRowFilter
            Else
                Return Nothing
            End If
        End Get
        Set(ByVal value As String)
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                CType(Me.Columns(mColumn), AgTextColumn).AgRowFilter = value
            End If
        End Set
    End Property



    Public Property AgHelpDataSet(ByVal mColumn As Integer, Optional ByVal LastHiddenColumns As Integer = 0, Optional ByVal TopOfContainer As Integer = 0, Optional ByVal LeftOfContainer As Integer = 0, Optional ByVal Height As Integer = 0, Optional ByVal IsMasterHelp As Boolean = False) As DataSet
        Get
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                Return CType(Me.Columns(mColumn), AgTextColumn).AgHelpDataSet
            Else
                Return Nothing
            End If
        End Get
        Set(ByVal value As DataSet)
            If TypeOf Me.Columns(mColumn) Is AgTextColumn Then
                CType(Me.Columns(mColumn), AgTextColumn).AgHelpDataSet = value
                CType(Me.Columns(mColumn), AgTextColumn).AgTopOfContainer = TopOfContainer
                CType(Me.Columns(mColumn), AgTextColumn).AgLeftOfContainer = LeftOfContainer
                CType(Me.Columns(mColumn), AgTextColumn).AgHelpGridHeight = Height
                CType(Me.Columns(mColumn), AgTextColumn).AgLastHiddenColumns = LastHiddenColumns
                CType(Me.Columns(mColumn), AgTextColumn).AgMasterHelp = IsMasterHelp
                Dim PkCol(1) As DataColumn
                PkCol(0) = CType(Me.Columns(mColumn), AgTextColumn).AgHelpDataSet.Tables(0).Columns(0)
                CType(Me.Columns(mColumn), AgTextColumn).AgHelpDataSet.Tables(0).PrimaryKey = PkCol

            End If
        End Set
    End Property
    Public ReadOnly Property AgDatasetAbsolutePosition(ByVal mColumn As Integer) As Long
        Get
            If Dg IsNot Nothing Then
                If Dg.CurrentCell IsNot Nothing Then
                    Return Dg.CurrentCell.RowIndex
                Else
                    Return -1
                End If
            Else
                Return -1
            End If
        End Get
    End Property


    Public Property AgSelectedValue(ByVal mColumn As Integer, ByVal mRow As Integer) As String
        Get
            Return Me.Item(mColumn, mRow).Tag
        End Get
        Set(ByVal value As String)
            Me.Item(mColumn, mRow).Tag = value

            Dim mAgTxtColumn As New AgTextColumn
            Dim I As Long, mFound As Boolean = False
            If TypeOf Me.Rows(mRow).Cells(mColumn).OwningColumn Is AgTextColumn Then
                mAgTxtColumn = Me.Rows(mRow).Cells(mColumn).OwningColumn
                If mAgTxtColumn.AgHelpDataSet IsNot Nothing And value <> "" Then
                    For I = 0 To mAgTxtColumn.AgHelpDataSet.Tables(0).Rows.Count - 1
                        If UCase(mAgTxtColumn.AgHelpDataSet.Tables(0).Rows(I)(0)) = UCase(value) Then
                            If Me.EditingControl IsNot Nothing Then Me.EditingControl.Text = mAgLib.XNull(mAgTxtColumn.AgHelpDataSet.Tables(0).Rows(I)(1))
                            Me.Item(mColumn, mRow).Value = mAgLib.XNull(mAgTxtColumn.AgHelpDataSet.Tables(0).Rows(I)(1))
                            mFound = True : Exit For
                        End If
                    Next
                    If Not mFound Then
                        MsgBox("Corresponding Data not found!")
                    End If
                Else
                    Me.Item(mColumn, mRow).Value = ""
                End If
            End If
        End Set
    End Property

    <System.Security.Permissions.UIPermission( _
    System.Security.Permissions.SecurityAction.LinkDemand, Window:=System.Security.Permissions.UIPermissionWindow.AllWindows)> _
    Protected Overrides Function ProcessDialogKey(ByVal keyData As Keys) As Boolean ' Extract the key code from the key value. 
        Dim key As Keys = keyData And Keys.KeyCode ' Handle the ENTER key as if it were a RIGHT ARROW key.


        If key = Keys.Enter Then
            If mCancelEditingControlValidating Then
                keyData = 0
                'Return Me.ProcessZeroKey(keyData)
                mCancelEditingControlValidating = False
            Else
                Return Me.ProcessTabKey(keyData)
                keyData = 0
            End If
        End If

            If Me.CurrentCell IsNot Nothing Then
                If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
                    If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                        If Dg IsNot Nothing Then
                            If Dg.Visible = True Then
                                Select Case key
                                    Case Keys.Up
                                        If Dg.CurrentCell IsNot Nothing Then
                                            If Dg.CurrentCell.RowIndex >= 1 Then
                                                Dg.CurrentCell = Dg(Dg.CurrentCell.ColumnIndex, Dg.CurrentCell.RowIndex - 1)
                                                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                            End If
                                        Else
                                            Dg.CurrentCell = Dg(1, 1)
                                            Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                        End If
                                        Return Me.ProcessZeroKey(keyData)
                                    Case Keys.Down
                                        If Dg.CurrentCell IsNot Nothing Then
                                            If Dg.CurrentCell.RowIndex <= Dg.Rows.Count - 2 Then
                                                Dg.CurrentCell = Dg(Dg.CurrentCell.ColumnIndex, Dg.CurrentCell.RowIndex + 1)
                                                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                            End If
                                        Else
                                            Dg.CurrentCell = Dg(1, Dg.Rows.Count - 1)
                                            Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                        End If
                                        Return Me.ProcessZeroKey(keyData)
                                    Case Keys.Escape
                                        Me.Focus()
                                        Dg.Visible = False
                                        Return Me.ProcessTabKey(keyData)
                                End Select
                            End If
                        End If
                    End If
                End If
            End If

            Return MyBase.ProcessDialogKey(keyData)
    End Function

    <System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.LinkDemand, Flags:=System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode)> _
        Protected Overrides Function ProcessDataGridViewKey(ByVal e As System.Windows.Forms.KeyEventArgs) As Boolean ' Handle the ENTER key as if it were a RIGHT ARROW key. 
        If e.KeyCode = Keys.Enter Then
            If mCancelEditingControlValidating Then
                'Return Me.ProcessZeKey(e.KeyData)
                e.Handled = True
                mCancelEditingControlValidating = False
            Else
                Return Me.ProcessTabKey(e.KeyData)
                e.Handled = True
            End If
        End If

            If Me.CurrentCell IsNot Nothing Then
                If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
                    If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                        If Dg IsNot Nothing Then
                            If Dg.Visible = True Then
                                Select Case e.KeyCode
                                    Case Keys.Up
                                        If Dg.CurrentCell IsNot Nothing Then
                                            If Dg.CurrentCell.RowIndex >= 1 Then
                                                Dg.CurrentCell = Dg(Dg.CurrentCell.ColumnIndex, Dg.CurrentCell.RowIndex - 1)
                                                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                            End If
                                        Else
                                            Dg.CurrentCell = Dg(1, 1)
                                            Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                        End If
                                        Return Me.ProcessZeroKey(e.KeyData)
                                    Case Keys.Down
                                        If Dg.CurrentCell IsNot Nothing Then
                                            If Dg.CurrentCell.RowIndex <= Dg.Rows.Count - 2 Then
                                                Dg.CurrentCell = Dg(Dg.CurrentCell.ColumnIndex, Dg.CurrentCell.RowIndex + 1)
                                                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                            End If
                                        Else
                                            Dg.CurrentCell = Dg(1, Dg.Rows.Count - 1)
                                            Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                        End If
                                        Return Me.ProcessZeroKey(e.KeyData)
                                    Case Keys.Escape
                                        Me.Focus()
                                        Dg.Visible = False
                                        Return Me.ProcessTabKey(e.KeyData)
                                End Select
                        End If


                        End If
                    End If
                End If
            End If

            Return MyBase.ProcessDataGridViewKey(e)
    End Function

    Private Sub CustomDataGridView_DataError(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewDataErrorEventArgs) Handles Me.DataError
        If e.Exception.Message = "DataGridViewComboBoxCell value is not valid." Then
            e.Cancel = True
        End If
    End Sub

    Private Sub AgDataGrid_EditingControl_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles Me.EditingControl_Validating
        Dim I As Integer
        If Me.CurrentCell.ColumnIndex = mMandatoryColumn Then
            For I = 0 To Me.ColumnCount - 1
                If I <> mMandatoryColumn And Me.Item(I, Me.CurrentCell.RowIndex).Value = "" Then
                    Me.Item(I, Me.CurrentCell.RowIndex).Value = Me.AgDefaultValue(I)
                End If
            Next
        End If

    End Sub


    Private Sub CustomDataGridView_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles Me.EditingControlShowing
        Dim x As New AgLib, I As Integer
        If TypeOf e.Control Is DataGridViewComboBoxEditingControl Then
            e.Control.Text = ""
            CType(e.Control, ComboBox).SelectedIndex = -1
            With DirectCast(e.Control, System.Windows.Forms.ComboBox)
                .DropDownStyle = ComboBoxStyle.DropDown
                .AutoCompleteSource = AutoCompleteSource.ListItems
                .AutoCompleteMode = AutoCompleteMode.Suggest
            End With
        End If

        RemoveHandler e.Control.KeyDown, AddressOf DgKeyDown
        AddHandler e.Control.KeyDown, AddressOf DgKeyDown

        RemoveHandler e.Control.KeyPress, AddressOf DgKeyPress
        AddHandler e.Control.KeyPress, AddressOf DgKeyPress

        RemoveHandler e.Control.KeyUp, AddressOf DgKeyUp
        AddHandler e.Control.KeyUp, AddressOf DgKeyUp

        RemoveHandler e.Control.Validating, AddressOf DgValidating
        AddHandler e.Control.Validating, AddressOf DgValidating

        RemoveHandler e.Control.LostFocus, AddressOf DgLostFocus
        AddHandler e.Control.LostFocus, AddressOf DgLostFocus


        If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
            If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                If CType(e.Control, TextBox).FindForm.Controls("HelpDg") IsNot Nothing Then
                    CType(e.Control, TextBox).FindForm.Controls("HelpDg").Dispose()
                End If

                Dg = New AgDataGrid
                CType(e.Control, TextBox).FindForm.Controls.Add(Dg)
                Dg.Name = "HelpDg"

                Dg.Visible = False
                Dg.Height = IIf(CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpGridHeight > 0, CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpGridHeight, 100)


                'Dg.Top = Me.Top + Me.Height
                If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgTopOfContainer > 0 Then
                    Dg.Top = Me.Top + CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgTopOfContainer + Me.ColumnHeadersHeight + Me.GetCellDisplayRectangle(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex, False).Top - 1
                Else
                    Dg.Top = Me.Top + Me.ColumnHeadersHeight + Me.GetCellDisplayRectangle(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex, False).Top - 1
                End If
                If Me.RowHeadersVisible Then
                    If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgLeftOfContainer > 0 Then
                        Dg.Left = Me.Left + CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgLeftOfContainer + Me.RowHeadersWidth + Me.GetCellDisplayRectangle(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex, False).Left - 5
                    Else
                        Dg.Left = Me.Left + Me.RowHeadersWidth + Me.GetCellDisplayRectangle(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex, False).Left - 5
                    End If
                Else
                    If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgLeftOfContainer > 0 Then
                        Dg.Left = Me.Left + CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgLeftOfContainer + Me.GetCellDisplayRectangle(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex, False).Left
                    Else
                        Dg.Left = Me.Left + Me.GetCellDisplayRectangle(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex, False).Left
                    End If
                End If


                If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter <> "" Then
                    CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet.Tables(0).DefaultView.RowFilter = Nothing
                    CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet.Tables(0).DefaultView.RowFilter = CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter
                End If

                Dg.DataSource = CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet.Tables(0).DefaultView
                If Dg.Columns.Count <= 2 Then
                    Dg.ColumnHeadersVisible = False
                End If
                Dg.RowHeadersVisible = False
                Dg.BringToFront()
                x.AgSetDataGridAutoWidths(Dg, 100, 100)
                Dg.Columns(0).Visible = False
                Dg.Columns(1).Width = Me.Columns(Me.CurrentCell.ColumnIndex).Width
                Dg.Width = 0
                For I = 1 To Dg.Columns.Count - 1
                    If I > (Dg.ColumnCount - 1 - CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgLastHiddenColumns) Then
                        Dg.Columns(I).Visible = False
                    Else
                        Dg.Width = Dg.Width + 4 + Dg.Columns(I).Width
                    End If
                Next
                If dg.width > (Dg.FindForm.Width + 50) Then Dg.Width = Dg.FindForm.Width - 100


                Dg.Width = Dg.Width - IIf(Dg.RowHeadersVisible, Dg.RowHeadersWidth, 0) + 25
                If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgLeftOfContainer > 0 Then
                    If Dg.Left + Dg.Width > Me.FindForm.Left + Me.FindForm.Width Then
                        Dg.Left = (Me.FindForm.Left + Me.FindForm.Width) - Dg.Width
                    End If
                Else
                    If Dg.Left + Dg.Width > Me.FindForm.Left + Me.FindForm.Width Then
                        Dg.Left = (Me.FindForm.Left + Me.FindForm.Width) - Dg.Width
                    End If
                End If
                Dg.ReadOnly = True
                Dg.TabStop = False
            End If
        End If

    End Sub

    Private Sub DgKeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
        Dim sTypedText As String
        Dim iFoundIndex As Integer
        Dim mAgLib As New AgLib
        If TypeOf sender Is DataGridViewComboBoxEditingControl Then
            Select Case e.KeyChar
                Case Chr(Keys.Back), Chr(Keys.Delete)
                Case Chr(Keys.Enter), Chr(Keys.Return), Chr(Keys.Tab), Chr(3)                    
                Case Else
                    sTypedText = sender.Text + e.KeyChar
                    iFoundIndex = sender.FindString(sTypedText)
                    If iFoundIndex < 0 Then
                        e.KeyChar = ""
                    End If
            End Select
        Else
            If Me.CurrentCell Is Nothing Then Exit Sub
            If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then

                With CType(Me.CurrentCell.OwningColumn, AgTextColumn)

                    If e.KeyChar = Chr(Keys.Return) Or e.KeyChar = Chr(Keys.Tab) Then
                        If .AgMandatory = True Then
                            If sender.Text = "" And .AgValueType <> TxtValueType.Number_Value Then
                                MsgBox("Required Field" & vbCrLf & "Can't Be Blank!")
                                e.Handled = True
                            ElseIf Val(sender.Text) = 0 And .AgValueType = TxtValueType.Number_Value Then
                                MsgBox("Required Field" & vbCrLf & "Can't Be Blank/Zero!")
                                e.Handled = True
                            End If
                        End If
                    End If


                    Select Case .AgValueType
                        Case TxtValueType.Number_Value
                            If .AgNumberLeftPlaces > 0 Or .AgNumberRightPlaces > 0 Then
                                NumPress(sender, e, .AgNumberLeftPlaces, .AgNumberRightPlaces, .AgNumberNegetiveAllow)
                            End If
                        Case TxtValueType.YesNo_Value
                            If e.KeyChar.ToString.ToUpper = "Y" Then
                                Me.Text = "Yes"
                            ElseIf e.KeyChar.ToString.ToUpper = "N" Then
                                Me.Text = "No"
                            End If
                            e.KeyChar = ""
                        Case TxtValueType.Text_Value
                            Select Case .AgTxtCase
                                Case TxtCase.Lower_Case
                                    e.KeyChar = e.KeyChar.ToString.ToLower
                                Case TxtCase.Upper_Case
                                    e.KeyChar = e.KeyChar.ToString.ToUpper
                                Case TxtCase.Sentance_Case
                                    If Me.Text.ToString.Length = 0 Then
                                        e.KeyChar = e.KeyChar.ToString.ToUpper
                                    End If
                            End Select
                    End Select
                End With
            End If
            End If

            If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
                If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                    If e.KeyChar <> Chr(Keys.Enter) Then If Dg.Visible = False Then Dg.Visible = True
                If Me.AgSearchMethod = AgLib.TxtSearchMethod.Comprehensive Then Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).DefaultView.RowFilter = Nothing
                CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet.Tables(0).DefaultView.RowFilter = CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter
                If sender.text.ToString.Trim <> "" Then
                    If Me.AgSearchMethod = AgLib.TxtSearchMethod.Comprehensive Then Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).DefaultView.RowFilter = IIf(CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter <> "", CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter & " And ", "") & "[" + Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).Columns(1).ColumnName + "] Like '%" + AgLib.GetFindStr(sender.text) + "%'"
                End If

                mAgLib.RowsFilter(sender, Dg, e, CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgMasterHelp, Me.AgSearchMethod)

            End If
        End If

        RaiseEvent EditingControl_KeyPress(sender, e)
    End Sub

    Private Sub DgValidating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
        If Not TypeOf sender Is ComboBox Then
            If Me.CurrentCell Is Nothing Then Exit Sub
            If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
                With CType(Me.CurrentCell.OwningColumn, AgTextColumn)
                    'If .AgMandatory = True Then
                    '    If sender.Text = "" And .AgValueType <> TxtValueType.Number_Value Then
                    '        MsgBox("Required Field" & vbCrLf & "Can't Be Blank!")
                    '        e.Cancel = True
                    '    ElseIf Val(sender.Text) = 0 And .AgValueType = TxtValueType.Number_Value Then
                    '        MsgBox("Required Field" & vbCrLf & "Can't Be Blank/Zero!")
                    '        e.Cancel = True
                    '    End If
                    'End If

                    Select Case .AgValueType
                        Case TxtValueType.Number_Value
                            Me.Item(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex).Value = Format(Val(sender.Text), "0.".PadRight(.AgNumberRightPlaces + 2, "0"))
                        Case TxtValueType.Date_Value
                            Me.Item(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex).Value = RetDate(sender.Text)
                        Case TxtValueType.Text_Value
                            Select Case .AgTxtCase
                                Case TxtCase.Lower_Case
                                    Me.Item(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex).Value = sender.Text.ToString.ToLower
                                Case TxtCase.Upper_Case
                                    Me.Item(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex).Value = sender.Text.ToString.ToUpper
                                Case TxtCase.Sentance_Case
                                    If sender.Text.Trim.Length > 0 Then
                                        Me.Item(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex).Value = sender.Text.Substring(0, 1).ToUpper + sender.Text.Substring(1, sender.Text.ToString.Length - 1)
                                    End If
                            End Select
                    End Select
                End With
            End If
        End If




        RaiseEvent EditingControl_Validating(sender, e)        
    End Sub

    Private Sub DgKeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        If e.KeyCode = Keys.Escape Then If Dg.Visible = True Then Dg.Visible = False
        If TypeOf sender Is ComboBox Then
            Select Case e.KeyCode
                Case Keys.Enter, Keys.Tab, Keys.Return, 3, Keys.Escape
                    Me.Focus()
            End Select
        End If

        If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
            If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then

                If Me.AgSearchMethod = AgLib.TxtSearchMethod.Comprehensive Then
                    If Not (e.KeyCode = Keys.Up Or e.KeyCode = Keys.Down) Then
                        Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).DefaultView.RowFilter = Nothing
                        CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet.Tables(0).DefaultView.RowFilter = CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter
                        If sender.text.ToString.Trim <> "" Then
                            Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).DefaultView.RowFilter = IIf(CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter <> "", CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter & " And ", "") & "[" + Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).Columns(1).ColumnName + "] Like '%" + AgLib.GetFindStr(sender.text) + "%'"
                        End If
                    End If
                End If
            End If
        End If

        RaiseEvent EditingControl_KeyDown(sender, e)
    End Sub

    Private Sub DgKeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        If e.KeyCode = Keys.Escape Then If Dg.Visible = True Then Dg.Visible = False
        If TypeOf sender Is ComboBox Then
            Select Case e.KeyCode
                Case Keys.Enter, Keys.Tab, Keys.Return, 3, Keys.Escape
                    Me.Focus()
            End Select
        End If

        If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
            If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                If Dg IsNot Nothing Then
                    If Dg.Visible = True Then

                        If Me.AgSearchMethod = AgLib.TxtSearchMethod.Comprehensive Then
                            If Not (e.KeyCode = Keys.Up Or e.KeyCode = Keys.Down) Then
                                Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).DefaultView.RowFilter = Nothing
                                CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet.Tables(0).DefaultView.RowFilter = CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter
                                If sender.text.ToString.Trim <> "" Then
                                    Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).DefaultView.RowFilter = IIf(CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter <> "", CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgRowFilter & " And ", "") & "[" + Me.AgHelpDataSet(Me.CurrentCell.ColumnIndex).Tables(0).Columns(1).ColumnName + "] Like '%" + AgLib.GetFindStr(sender.text) + "%'"
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If

        RaiseEvent EditingControl_KeyUp(sender, e)
    End Sub

    Private Sub DgLostFocus(ByVal sender As Object, ByVal e As System.EventArgs)
        If Me.CurrentCell Is Nothing Then Exit Sub
        If TypeOf sender Is ComboBox Then
            CType(Me.EditingControl, ComboBox).SelectedIndex = CType(Me.EditingControl, ComboBox).FindString(CType(Me.EditingControl, ComboBox).Text)

        End If


        If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn And Dg IsNot Nothing Then
            If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                With CType(sender, TextBox)
                    If Dg.Visible = True And .Text <> "" Then
                        If Not Dg.Focused Then Dg.Visible = False
                        If Not CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgMasterHelp Then
                            If Dg.CurrentCell IsNot Nothing Then
                                .Text = mAgLib.XNull(Dg.Item(1, Dg.CurrentCell.RowIndex).Value)
                                .Tag = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
                            Else
                                .Text = ""
                                .Tag = ""
                                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = ""
                            End If
                        End If
                    ElseIf Dg.Visible = True And .Text = "" Then
                        If Not Dg.Focused Then Dg.Visible = False
                        .Text = ""
                        .Tag = ""
                        Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = ""
                    ElseIf .Text = "" Then
                        .Text = ""
                        .Tag = ""
                        Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = ""
                    End If
                End With
            End If
        End If
        RaiseEvent EditingControl_LostFocus(sender, e)
    End Sub

    Private Sub Dg_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Dg.DoubleClick
        Me.Focus()
    End Sub


    Private Sub Dg_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles Dg.LostFocus
        If TypeOf Me.CurrentCell.OwningColumn Is AgTextColumn Then
            If CType(Me.CurrentCell.OwningColumn, AgTextColumn).AgHelpDataSet IsNot Nothing Then
                Me.AgSelectedValue(Me.CurrentCell.ColumnIndex, Me.CurrentCell.RowIndex) = mAgLib.XNull(Dg.Item(0, Dg.CurrentCell.RowIndex).Value)
            End If
        End If
        sender.visible = False
    End Sub


    Private Sub AgDataGrid_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Me.MouseClick
        Dim FileName As String
        Try
            If e.Button = Windows.Forms.MouseButtons.Right Then
                If MsgBox("Want to Export Grid Data", MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2, "Export Grid?...") = vbNo Then Exit Sub
                FileName = GetFileName(My.Computer.FileSystem.SpecialDirectories.Desktop)
                If FileName.Trim <> "" Then
                    Call exportExcel(sender, FileName, Me.Handle)
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub




End Class

